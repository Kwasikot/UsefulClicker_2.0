Ты работаешь в репозитории UsefulClicker, в котором уже реализован движок на Python (core/xml_engine.py),
LLM-клиенты (OpenAI, Ollama), voice-daemon и XML-сценарии. Теперь необходимо создать GUI-фронтенд для управления
кликером. Задачи:

Кликер должен содержать систему подключаемых модулей. 
В частности ui может реализовываться модулями web_ui и qt_ui.

Кликер должен поддерживать несколько gui фронтэндов:
1. В каталоге ui/qt_ui будет фронтенд основанный на библиотеке PyQt5.
2. В каталоге ui/web_ui будет web версия ui.

Сегодня мы займемся Qt5-версией.
Ты должен реализовать возможность подключать любой ui по желанию.

Можно добавить следующие фичи:
В source tree есть каталог ui/qt_ui.
Там лежит файл mainwindow.ui. Это шаблон gui для qt5 приложения.



Вкладка xml описания (обьект XMLTab в mainwindow.ui)
Эта вкладка отображает xml программу в двух виджетах treeWidget и xmlEditor.
Необходимо чтобы программу можно было 
a) редактировать программу кликера. По умолчанию открывается каталог examples.
б) загружать программу кликера из xml файла
в) сохранять программу кликера в xml файл 


1 Панель кнопок controlPanel (обьект controlPanel в mainwindow.ui) 
кнопка с именем qt-обьекта loadProgram в mainwindow.ui должна загружать xml описание в xmlEditor и в treeWidget.


1.1 Кнопка restartButton
Выполняет перезапуск программы кликера.
Нужно создать флаг для запроса на перезапуск программы.
При исполнении каждой следующей ноды в движке мы смотрим не запрошен ли перезапуск программы. 
Если мы в ожидании например в wait-ноде, то там тоже постоянно опрашивается флаг запроса на перезапуск.
  
1.2 Кнопка playButton
Кнопка с двумя состояниями Play \ Pause.
Она мигает зеленой обводкой когда кликер запущен. 
Желтый цвет в режиме паузы.
В режиме паузы название кнопки меняется на Pause
Реализует тот же функционал что и по сочетанию клавиш ctrl+space.

1.3 Кнопка nextButton
Реализует тот же функционал что и по сочетанию клавиш ctrl+N.
Т.е. сразу идёт к следующему узлу сценария.

1.4 Обьект listIndex.
Отображает номер текущего элемента в списке.

1.5 Обьект treeWidget. 
Представляет дреевидное представление программы в treeWidget
Текущий исполняемый узел должен выделяться зеленым цветом в этом списке.





2. Вкладка настройки CuriosityNode (обьект CuriosityNodeTab в mainwindow.ui)
Если в xml дереве присутсвует нода CuriosityNode, то страница CuriosityNodeTab становится видимой, иначе она скрыта.
	2.1 Кнопки управления нодой CuriosityNode: 
		Кнопка regenerateButton по которой происходит:
		2.1.1 формирование нового промта
		2.1.2. рестарт программы xml кликера
		2.1.3. Заполнение raw_llm_output_textarea текстовым выходом от модели
		2.1.4. Заполнение termsList распарсенным списком запросов
		
	2.2 Виджет с выбором дисциплины disciplinesList	
	2.4	Виджет с выбором subtopicsList 
	Инициализируются соответсвующими массивами из curiosity_drive_node.py
	
	2.6 Чекбокс отметка выбор случайной дисциплины и subtopics.
		При отметке случайной дисциплины disciplinesList, subtopicsList гаснут.
	
	2.3 Результирующий список termsList с названием переменной например science_terms_list, который кликер получает от llm
	2.4 Сырой ответ от llm в raw_llm_output_textarea .
	
	

3. Вкладка настройки llmcall(обьект llmcall_tab в mainwindow.ui)
Если в xml дереве присутсвует нода llmcall, то страница llmcall_tab становится видимой, иначе она скрыта.
	3.2 Отдельное поле промта promptEdit, которое инициализируется xml описанием.
	3.3 Кнопка regenerateList по которой происходит:
		3.3.1. формирование нового промта
		3.3.2. рестарт программы xml кликера
	2.3 Результирующий список с названием переменной например pragmatism_tips, который кликер получает от llm
	3.4 Сырой ответ от llm в отдельном текстовом поле.

------------------------------------------------------------------

Пускай кликер поднимает локальный сервер на fastapi.

В этом сервере реализуй страницу с настройками xml нод.
Мы создаем шаблон приложения поэтому проектируй код так чтобы легко потом можно было что-то поменять.

На этой страницы будут 



1. Вкладка настройки CuriosityNode.
Выбор дисциплины disciplines. 
Подтемы subtopics.
Выбор default_subtopics.
Заполни эти элементы ui значениями из скрипта curiosity_drive_node.py.




2. Вкладка настройка CuriosityNode
	2.1 Кнопки управления нодой CuriosityNode: 
		Кнопка Regenerate list по которой происходит:
		2.1.1 формирование нового промта
		2.1.2. рестарт программы xml кликера
		
	2.2 Combo-боксы с выбором дисциплины	
	2.4	 Combo-бокс с выбором subtopics 
	2.5	 Combo-бокс с выбором default_subtopics	
	Комбобоксы инициализируются соответсвующими массивами из curiosity_drive_node.py
	2.6 Чекбокс отметка выбор случайной дисциплины и subtopics.
		При отметке случайной дисциплины комбобоксы из п. 2.2 2.4 2.5 гаснут.
	
	2.3 Результирующий список с названием переменной например science_terms_list, который кликер получает от llm
	2.4 Сырой ответ от llm в отдельном текстовом поле.

3. Вкладка настройка llmcall
	3.2 Отдельное поле промта, которое инициализируется xml описанием.
	3.3 Кнопка Regenerate list по которой происходит:
		3.3.1. формирование нового промта
		3.3.2. рестарт программы xml кликера
	2.3 Результирующий список с названием переменной например pragmatism_tips, который кликер получает от llm
	3.4 Сырой ответ от llm в отдельном текстовом поле.
	

4. Общие настройки для CuriosityNode и llmcall
	4.1 Выбор provider: Селектор выбора между ollama и openai.
	4.3 Выбор model: Выбор названия модели combobox-ы с уже готовыми названиями моделей.
	для ollama пока это llama3.2:latest
	для openai gpt-4o-mini, gpt-5
	4.4 Выбор значения temperature



